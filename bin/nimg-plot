#!/usr/bin/env python

__doc__ = """
Plot images in a image series.

Usage:
  pltimgs random <N> [options]
  pltimgs sequence <min_angle> <max_angle> <angle_step> [options]
  pltimgs manual <angle> [<angle>...] [options]
  pltimgs -h | --help
  pltimgs --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.
  -s <s>, --imageseries=<s>      Yaml configuration for the image series
  -c <c>, --colorlimits=<c>      limits of color (z) axis: cmin,cmax
"""

maxN = 20

def main():
    import docopt
    args = docopt.docopt(__doc__)
    print args
    isconfig = args['--imageseries']
    import nimg.config.imageseries as nci
    imageseries = nci.load(isconfig)
    
    angles = args['<angle>']
    if angles:
        angles = map(float, angles)
    else:
        if args['random']: 
            N = eval(args["<N>"])
            import random
            angles = random.sample(imageseries.angles, N)
        elif args['sequence']:
            min_angle = eval(args['<min_angle>'])
            max_angle = eval(args['<max_angle>'])
            angle_step = eval(args['<angle_step>'])
            angles = np.arange(min_angle, max_angle, angle_step)
        else:
            raise RuntimeError
    c = args['--colorlimits']
    c = eval(c)
    plot(angles, imageseries, c)
    return


def sequence(args):
    return

def random(rags):
    return
    
import numpy as np, pylab

def plot(angles, imageseries, c):
    cmin, cmax = c
    paths = [imageseries.getFilename(angle) for angle in angles]
    # compute layout
    N = len(paths)
    if N > maxN:
        raise RuntimeError("too many images")
    cols = min(int(np.sqrt(N)) + 1, N)
    rows = int(np.ceil(1.*N/cols))
    # plot
    import matplotlib.pyplot as plt
    plt.figure(1)
    for index, path in enumerate(paths):
        print path
        plt.subplot(rows, cols, index+1)
        angle = angles[index]
        img = imageseries.getData(angle)
        # plot
        pylab.imshow(img)
        # pylab.colorbar()
        pylab.clim(cmin, cmax)
        continue
    pylab.show()
    return


if __name__ == '__main__': main()
